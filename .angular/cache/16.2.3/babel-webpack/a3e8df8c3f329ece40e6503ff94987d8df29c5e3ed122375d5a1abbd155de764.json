{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(next, state) {\n    // Check if the user is authenticated\n    const isAuthenticated = this.authService.isAuthenticatedValue;\n    if (isAuthenticated) {\n      // If authenticated, allow access\n      return true;\n    } else {\n      // Redirect to the login page if the user is not authenticated\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}\n_class = AuthGuard;\n_class.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthGuard","constructor","authService","router","canActivate","next","state","isAuthenticated","isAuthenticatedValue","navigate","i0","ɵɵinject","i1","AuthService","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Administrator\\source\\repos\\FormApp\\src\\app\\auth-guard\\auth.guard.ts"],"sourcesContent":["// Import necessary modules and components\nimport { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthService } from '../services/auth.service'; \n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(\n    next: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    \n    // Check if the user is authenticated\n    const isAuthenticated = this.authService.isAuthenticatedValue;\n    \n    if (isAuthenticated) {\n      // If authenticated, allow access\n      return true;\n    } else {\n      // Redirect to the login page if the user is not authenticated\n      this.router.navigate(['/login']);\n      return false;\n    }\n  }\n}"],"mappings":";;;;AASA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,WAAWA,CACTC,IAA4B,EAC5BC,KAA0B;IAE1B;IACA,MAAMC,eAAe,GAAG,IAAI,CAACL,WAAW,CAACM,oBAAoB;IAE7D,IAAID,eAAe,EAAE;MACnB;MACA,OAAO,IAAI;KACZ,MAAM;MACL;MACA,IAAI,CAACJ,MAAM,CAACM,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAChC,OAAO,KAAK;;EAEhB;;SAnBWT,SAAS;;mBAATA,MAAS,EAAAU,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;;SAATf,MAAS;EAAAgB,OAAA,EAAThB,MAAS,CAAAiB,IAAA;EAAAC,UAAA,EAFR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}