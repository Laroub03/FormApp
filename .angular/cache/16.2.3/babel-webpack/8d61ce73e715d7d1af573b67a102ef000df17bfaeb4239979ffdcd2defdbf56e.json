{"ast":null,"code":"var _class;\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  // Getter to access the current authentication status\n  get isAuthenticatedValue() {\n    return this.isAuthenticatedSubject.value;\n  }\n  constructor(http) {\n    this.http = http;\n    this.loginUrl = 'https://localhost:8443/api/Auth/login';\n    this.registerUrl = 'https://localhost:8443/api/Auth/register';\n    this.isAuthenticatedSubject = new BehaviorSubject(false);\n  }\n  // Method to handle user login\n  login(username, password, role) {\n    return this.http.post(this.loginUrl, {\n      username,\n      password,\n      role\n    }, {\n      responseType: 'text'\n    }).pipe(map(response => {\n      console.log('Login response:', response);\n      if (response) {\n        // Store the token in local storage and set authentication status to true\n        localStorage.setItem('token', response);\n        this.isAuthenticatedSubject.next(true);\n        return true;\n      }\n      return false;\n    }));\n  }\n  // Method to handle user registration\n  register(username, password, role) {\n    return this.http.post(this.registerUrl, {\n      username,\n      password,\n      role\n    }).pipe(map(response => {\n      console.log('Register response:', response);\n      if (response.username) {\n        // If a username is received, registration is successful\n        return true;\n      }\n      return false;\n    }));\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["BehaviorSubject","map","AuthService","isAuthenticatedValue","isAuthenticatedSubject","value","constructor","http","loginUrl","registerUrl","login","username","password","role","post","responseType","pipe","response","console","log","localStorage","setItem","next","register","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Administrator\\source\\repos\\FormApp\\src\\app\\services\\auth.service.ts"],"sourcesContent":["// Import necessary modules and components\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private readonly loginUrl = 'https://localhost:8443/api/Auth/login'; \r\n  private readonly registerUrl = 'https://localhost:8443/api/Auth/register'; \r\n  private isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\r\n\r\n  // Getter to access the current authentication status\r\n  get isAuthenticatedValue(): boolean {\r\n    return this.isAuthenticatedSubject.value;\r\n  }\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Method to handle user login\r\n  login(username: string, password: string, role: string): Observable<boolean> {\r\n    return this.http.post(this.loginUrl, { username, password, role }, { responseType: 'text' }) \r\n      .pipe(\r\n        map(response => {\r\n          console.log('Login response:', response);\r\n          if (response) {\r\n            // Store the token in local storage and set authentication status to true\r\n            localStorage.setItem('token', response);\r\n            this.isAuthenticatedSubject.next(true);\r\n            return true;\r\n          }\r\n          return false;\r\n        })\r\n      );\r\n  }\r\n  \r\n  // Method to handle user registration\r\n  register(username: string, password: string, role: string): Observable<boolean> {\r\n    return this.http.post<{ username: string, passwordHash: string, role: string }>(\r\n      this.registerUrl, \r\n      { username, password, role }\r\n    ).pipe(\r\n      map(response => {\r\n        console.log('Register response:', response); \r\n        if (response.username) {\r\n          // If a username is received, registration is successful\r\n          return true;\r\n        }\r\n        return false;\r\n      })\r\n    );\r\n  }\r\n}"],"mappings":";AAGA,SAASA,eAAe,QAAoB,MAAM;AAClD,SAASC,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,WAAW;EAKtB;EACA,IAAIC,oBAAoBA,CAAA;IACtB,OAAO,IAAI,CAACC,sBAAsB,CAACC,KAAK;EAC1C;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IATP,KAAAC,QAAQ,GAAG,uCAAuC;IAClD,KAAAC,WAAW,GAAG,0CAA0C;IACjE,KAAAL,sBAAsB,GAAG,IAAIJ,eAAe,CAAU,KAAK,CAAC;EAO7B;EAEvC;EACAU,KAAKA,CAACC,QAAgB,EAAEC,QAAgB,EAAEC,IAAY;IACpD,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAAC,IAAI,CAACN,QAAQ,EAAE;MAAEG,QAAQ;MAAEC,QAAQ;MAAEC;IAAI,CAAE,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC,CACzFC,IAAI,CACHf,GAAG,CAACgB,QAAQ,IAAG;MACbC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,QAAQ,CAAC;MACxC,IAAIA,QAAQ,EAAE;QACZ;QACAG,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,QAAQ,CAAC;QACvC,IAAI,CAACb,sBAAsB,CAACkB,IAAI,CAAC,IAAI,CAAC;QACtC,OAAO,IAAI;;MAEb,OAAO,KAAK;IACd,CAAC,CAAC,CACH;EACL;EAEA;EACAC,QAAQA,CAACZ,QAAgB,EAAEC,QAAgB,EAAEC,IAAY;IACvD,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CACnB,IAAI,CAACL,WAAW,EAChB;MAAEE,QAAQ;MAAEC,QAAQ;MAAEC;IAAI,CAAE,CAC7B,CAACG,IAAI,CACJf,GAAG,CAACgB,QAAQ,IAAG;MACbC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,QAAQ,CAAC;MAC3C,IAAIA,QAAQ,CAACN,QAAQ,EAAE;QACrB;QACA,OAAO,IAAI;;MAEb,OAAO,KAAK;IACd,CAAC,CAAC,CACH;EACH;;SA5CWT,WAAW;;mBAAXA,MAAW,EAAAsB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXzB,MAAW;EAAA0B,OAAA,EAAX1B,MAAW,CAAA2B,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}